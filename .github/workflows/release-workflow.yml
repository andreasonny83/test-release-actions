name: Release Workflow

on:
  workflow_call:
    inputs:
      LABEL_NAME:
        description: 'The PR Github label name required for the release'
        required: true
        type: string
      PACKAGEJSON_DIR:
        description: 'The directory of the package to be released'
        required: true
        type: string
      TAG_PREFIX:
        description: 'The prefix of the tag to be applied'
        required: true
        type: string
      PACKAGE_NAME:
        description: 'The name of the package to be released'
        required: true
        type: string
      ENV_TAG:
        description: 'The name of the environment to be released'
        required: true
        type: string
      SCOPE:
        description: 'The scope that the package is getting published with'
        required: true
        type: string
      REGISTRY:
        description: 'The target registry'
        required: true
        type: string
      DRY_RUN:
        description: 'Flag for publishing with --dry-run'
        required: true
        type: boolean

jobs:
  version:
    runs-on: ubuntu-latest
    env:
      GITHUB_REF: ${{ github.head_ref }}
    outputs:
      RELEASE_VERSION: ${{ steps.set-version.outputs.version }}
      RELEASE_SEMVER: ${{ steps.set-version.outputs.semver }}
      RELEASE_TAG_NAME: ${{ steps.set-version.outputs.versionTagName }}
      RELEASE_TAG_NUMBER: ${{ steps.set-version.outputs.versionTagNumber }}
    steps:
    - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c
      with:
        fetch-depth: 0
    - name: Set Version
      id: set-version
      run: |
        VERSION=$(echo "${{ env.GITHUB_REF }}" | cut -d "_" -f2)
        SEMVER="${VERSION%%-*}"
        VERSION_SUFFIX="${VERSION#*-}"
        VERSION_TAG_NAME="${VERSION_SUFFIX%%.*}"
        VERSION_TAG_NUMBER="${VERSION_SUFFIX#*.}"
        echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
        echo "semver=${SEMVER}" >> "$GITHUB_OUTPUT"
        echo "versionTagName=${VERSION_TAG_NAME}" >> "$GITHUB_OUTPUT"
        echo "versionTagNumber=${VERSION_TAG_NUMBER}" >> "$GITHUB_OUTPUT"
        echo "Version to be released: ${VERSION}"
        echo "Semver version: ${SEMVER}"
        echo "Version Tag Name: ${VERSION_TAG_NAME}"
        echo "Version Tag Number: ${VERSION_TAG_NUMBER}"

  release:
    name: Bump version and release
    runs-on: ubuntu-latest
    needs: [version]
    env:
      VERSION: "${{ needs.version.outputs.RELEASE_VERSION }}"
      SEMVER: "${{ needs.version.outputs.RELEASE_SEMVER }}"
      TAG_NAME: "${{ needs.version.outputs.RELEASE_TAG_NAME }}"
      TAG_NUMBER: "${{ needs.version.outputs.RELEASE_TAG_NUMBER }}"
      GITHUB_REF: ${{ github.head_ref }}
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c
        name: checkout branch
        with:
          fetch-depth: 0
      - uses: ./.github/actions/setup
        name: Install npm dependencies
      - uses: jaywcjlove/github-action-package@49a5421db5e6491fef68091038ab6f3516755154
        name: Bump version number
        with:
          path: "${{ inputs.PACKAGE_NAME }}/package.json"
          version: "${{ env.VERSION }}"
      - uses: ./.github/actions/publish
        name: Publish package
        with:
          registry: ${{ inputs.REGISTRY }}
          scope: ${{ inputs.SCOPE }}
          name: ${{ inputs.PACKAGE_NAME }}
          dry-run: ${{ inputs.DRY_RUN }}
          NPM_FETCH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PACKAGE_PUBLISH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Commit version bump and version tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git status
          echo "Tagging with: ${{ env.VERSION }}"
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git add "${{ inputs.PACKAGE_NAME }}/package.json"
          git tag -a "${{ inputs.TAG_PREFIX }}${{ env.VERSION }}" -m "${{ inputs.PACKAGE_NAME }} v${{ env.VERSION }}"
          git commit -m "Bump ${{ inputs.PACKAGE_NAME }} version to ${{ env.VERSION }}"
          git push origin HEAD:"${{ env.GITHUB_REF }}" --follow-tags

      # Note that the first git push command should be successful in most cases.
      # The second git push command is only used as a backup option in case the first git push
      # command fails for some reason.
      - name: Push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push origin HEAD:${{ github.ref }} --follow-tags